一，基础命令

fangyong   980897902@qq.com
安装好后，运行 git Bash

mkdir D:\gitTest
cd D:\gitTest

$ git config --global user.name "fangyong"
$ git config --global user.email "980897902@qq.com"

$ git init

$ git add readme.txt   告诉Git，把文件添加到仓库，实际上就是把文件修改添加到暂存区

$ git commit -m "wrote a readme file"   告诉Git，把文件提交到仓库，实际上就是把暂存区的所有内容提交到当前分支，只负责把暂存区的修改提交了，

$ git status  查看暂存区是否是干净的

$ git diff readme.txt    顾名思义就是查看difference

修改后
$ git add readme.txt
$ git commit -m "add  somethings "

git log   令显示从最近到最远的提交日

 git reset --hard HEAD^
用HEAD表示当前版本
上一个版本就是HEAD^
上上一个版本就是HEAD^^
HEAD~100前100个版本

git reset --hard 3628164    回到指定的版本，可以是之前的也可以是之后的

git reflog查看命令历史，以便确定要回到未来的哪个版本

cat readme.txt  查看内容

git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
总之，就是让这个文件回到最近一次git commit或git add时的状态。
--很重要，没有--，就变成了“切换到另一个分支”的命令

用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区

$ rm test.txt  $  git commit  删除文件



二、GitHub
只要注册一个GitHub账号，就可以免费获得Git远程仓库
fangyong123
fy971676038

GitHub允许你添加多个Key。假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。


将本地git库推送的gitHub中
$ git remote add origin git@github.com:fangyong123/gitTest.git
输入yes
git push -u origin master第一次推送master分支的所有内容
每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

将gitHub下载到本地git库
$ git clone git@github.com:fangyong123/gitTest.git

修改其人的项目，首先要Fork把项clone到自己的仓库，再远程下到本地，修改提交，然后在Github中pull request一下


三、分支

你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。

在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。

$ git checkout -b dev       我们创建dev分支，然后切换到dev分支：
git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：

用git branch命令查看当前分支：

修改提交$ git add readme.txt    $ git commit -m "branch test"
dev分支的工作完成，我们就可以切换回master分支
$ git checkout master

把dev分支的工作成果合并到master分支上
$ git merge dev
准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
$ git merge --no-ff -m "merge with no-ff" dev

查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>


Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容，我们修改如下后保存
用git log --graph命令可以看到分支合并图

修复bug:
$ git stash   可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
    一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
    另一种方式是用git stash pop，恢复的同时把stash内容也删了：
再用git stash list查看，就看不到任何stash内容了
你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：$ git stash apply stash@{0}

查看远程库的信息，用git remote
用git remote -v显示更详细的信息

把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：
$ git push origin master
$ git push origin dev

创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支
$ git checkout -b dev origin/dev
指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
$ git branch --set-upstream dev origin/dev
先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，
$ git pull
$ git commit -m "merge & fix hello.py"
$ git push origin dev



四、标签
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。

签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错

命令git tag <name> <commit id>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签
用命令git show <tagname>可以看到PGP签名信息
命令git tag可以查看所有标签

如果标签打错了，也可以删除 $ git tag -d v0.1
如果要推送某个标签到远程，使用命令git push origin <tagname>
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除
命令git push origin --tags可以推送全部未推送过的本地标签；
然后，从远程删除。删除命令也是push，但是格式如 $ git push origin :refs/tags/v0.9


五、
忽略某些文件时，需要编写.gitignore；
.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理


$ git config --global alias.st status
$ git st等同于 git status

$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch

$ git config --global alias.unstage 'reset HEAD'


六、搭git服务器
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，
第一步，安装git：
$ sudo apt-get install git

第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git

第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。

第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git

第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。

第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。

